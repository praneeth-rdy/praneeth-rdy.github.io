{"version":3,"file":"component---src-pages-blog-js-72f83a45fbf3df301f84.js","mappings":"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","sources":["webpack://praneeth-rdy.github.io/./src/components/horizontalLine.js","webpack://praneeth-rdy.github.io/./src/components/blog/BlogItem.js","webpack://praneeth-rdy.github.io/./src/pages/blog.js"],"sourcesContent":["import React from \"react\"\n\nfunction HorizontalLine({ color, margin }) {\n  if (margin === \"\") {\n    margin = \"30px\"\n  }\n  return (\n    <hr\n      style={{\n        backgroundColor: color,\n        height: 2,\n        margin: margin + \" 0\",\n      }}\n    />\n  )\n}\n\nexport default HorizontalLine\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { BsDot } from \"react-icons/bs\"\n// import Img from \"gatsby-image\"\nimport \"../../styles/css/screens/blog/blog-item.css\"\n\nfunction BlogItem({ node, postClass }) {\n  return (\n    <article className=\"blog-item transition-fade\" style={{ padding: 0 }}>\n      <Link to={\"/blog\" + node.fields.slug} className=\"blog-item-link\">\n        <div className=\"post-content-body\">\n          <h2 className=\"blog-item-category\">{node.frontmatter.category}</h2>\n          <h3 className=\"blog-item-heading\" style={{ margin: 0 }}>\n            {node.frontmatter.title || node.fields.slug}\n          </h3>\n          <div className=\"blog-item-addinfo\">\n            <h2>\n              {/* <FaClock className=\"fa-icon\" /> */}\n              Published on {node.frontmatter.date}\n            </h2>\n            <div className=\"addinfo-separator\">\n              <BsDot className=\"fa-icon\" />\n            </div>\n            <h2>{node.frontmatter.maxread} read</h2>\n            {/* <h2>\n              <FaUser className=\"fa-icon\" />\n              {node.frontmatter.author}\n            </h2> */}\n          </div>\n          {/* <Img\n        fluid={node.frontmatter.thumbnail.childImageSharp.fluid}\n        className={`post-card ${postClass} ${\n          node.frontmatter.thumbnail ? `with-image` : `no-image`\n        }`}\n        style={\n          node.frontmatter.thumbnail && {\n            marginTop: \"2rem\",\n            marginBottom: \"4rem\",\n          }\n        }\n      /> */}\n          {/* <blockquote className=\"blog-item-quote\">\n            {node.frontmatter.quote}\n          </blockquote> */}\n          <p className=\"blog-item-description\">\n            {node.frontmatter.description}\n          </p>\n        </div>\n      </Link>\n      {/* <HorizontalLine color=\"rgba(0, 0, 0, 0.5)\" margin=\"50px\" /> */}\n    </article>\n  )\n}\n\nexport default BlogItem\n","import React, { useState } from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\n// import \"../styles/global.scss\"\nimport \"../styles/normalize.css\"\nimport \"../styles/css/screens/main.css\"\nimport \"../styles/css/screens/blog/blog-page.css\"\n\nimport BlogItem from \"../components/blog/BlogItem\"\nimport HorizontalLine from \"../components/horizontalLine\"\nimport ThemeContextProvider from \"../context/ThemeContextProvider\"\n\n// TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\nconst BlogPage = ({ data }, location) => {\n  const navHeading = data.site.siteMetadata.navHeading\n  const allPosts = data.allMarkdownRemark.edges\n  const allCategories = [\n    \"all\",\n    ...new Set(\n      data.allMarkdownRemark.edges.map(({ node }) => node.frontmatter.category)\n    ),\n  ]\n  const [posts, setPosts] = useState(allPosts)\n  const [category, setCategory] = useState(\"all\")\n  let postCounter = 0\n\n  function filterPosts(categ) {\n    if (categ === \"all\") {\n      setPosts(allPosts)\n    } else {\n      const newPosts = allPosts.filter(\n        postItem => postItem.node.frontmatter.category === categ\n      )\n      setPosts(newPosts)\n    }\n    setCategory(categ)\n  }\n\n  return (\n    <ThemeContextProvider>\n      <Layout navHeading={navHeading} path=\"/blog\">\n        <Seo\n          title=\"Blog\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        {/* <Bio /> */}\n        {data.site.siteMetadata.description && (\n          <header className=\"page-head\">\n            <h2 className=\"page-head-title\">\n              {data.site.siteMetadata.description}\n            </h2>\n          </header>\n        )}\n        <HorizontalLine color=\"rgba(0, 0, 0, 0.5)\" />\n        <h2 className=\"blogs-page-heading\">My Recent Blogs</h2>\n        <div className=\"blog-filters-container\">\n          {allCategories.map((categ, index) => (\n            <button\n              key={index}\n              className={`blog-filter button ${\n                categ === category ? \"primary\" : \"\"\n              } small`}\n              onClick={() => filterPosts(categ)}\n            >\n              {categ[0].toUpperCase() + categ.slice(1)}\n            </button>\n          ))}\n        </div>\n        <div className=\"blog-body\">\n          {posts.map(({ node }) => {\n            postCounter++\n            return (\n              <BlogItem\n                key={node.fields.slug}\n                count={postCounter}\n                node={node}\n                postClass={`post`}\n              />\n            )\n          })}\n        </div>\n      </Layout>\n    </ThemeContextProvider>\n  )\n}\n\nconst blogQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        navHeading\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fileAbsolutePath: { regex: \"/(blogs)/\" } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            author\n            description\n            maxread\n            category\n          }\n        }\n      }\n    }\n  }\n`\n\nconst BlogPageExport = props => (\n  <StaticQuery\n    query={blogQuery}\n    render={data => (\n      <BlogPage location={props.location} props data={data} {...props} />\n    )}\n  />\n)\n\nexport default BlogPageExport\n"],"names":["_ref","color","margin","React","style","backgroundColor","height","node","postClass","className","padding","Link","to","fields","slug","frontmatter","category","title","date","BsDot","maxread","description","BlogPage","location","data","navHeading","site","siteMetadata","allPosts","allMarkdownRemark","edges","allCategories","concat","_toConsumableArray","Set","map","_ref2","posts","setPosts","useState","setCategory","postCounter","ThemeContextProvider","Layout","path","Seo","keywords","HorizontalLine","categ","index","key","onClick","newPosts","filter","postItem","filterPosts","toUpperCase","slice","_ref3","BlogItem","count","props","StaticQuery","query","render","Object","assign"],"sourceRoot":""}